#!/usr/bin/env python

import sys

import numpy as np

import roslib
import rospy

from geometry_msgs.msg import Point, Pose, Quaternion
from nav_msgs.msg import OccupancyGrid, Path
from std_msgs.msg import String
from visualization_msgs.msg import Marker

class Node:
    def __init__(self, point, g, h, parent):
        self.point = point
        self.g = g
        self.h = h
        self.f = g+h
        self.parent = parent

class NavigationNode:
    def __init__(self):
        self.robot_pos = None
        self.map = None
        self.goal = None

        self.sub_pos = rospy.Subscriber('/robot_pos', Point, self.cb_pos)
        self.sub_map = rospy.Subscriber('/map', OccupancyGrid, self.cb_map)
        self.sub_goal = rospy.Subscriber('/move_base_simple/goal', Point, self.cb_goal)

        self.pub_path = rospy.Publisher('/global_path', Path, latch=True, queue_size=10)
        self.pub_goal_marker = rospy.Publisher('/goal_marker', Marker, queue_size=10)
        self.pub_path_marker = rospy.Publisher('/path_marker', Marker, queue_size=10)

    def cb_pos(self, msg):
        self.robot_pos = msg

    def cb_map(self, msg):
        self.map = np.transpose(np.asarray(msg.data, dtype=np.int8).reshape(msg.info.width, msg.info.height))

    def cb_goal(self, msg):
        self.goal = msg

    def heuristic(self, start, goal):
        return np.abs(start.x-goal.x)+np.abs(start.y-goal.y)

    def a_star(self, start, goal):
        openset = set()
        closedset = set()

        start_node = Node.__init__(self, start, 0, self.heuristic(start, goal), None)

        openset.add(start_node)

        while(len(openset)==0):
            current = min(openset, key=lambda x:x.f)
            openset.remove(current)
            closedset.add(current)

            if(current.point==goal):
                path = []
                current_node = current
                while current_node is not None:
                    path.append(current_node.point)
                    current = current_node.parent
                print(path[::-1])
                return path[::-1]

            x = 1
            y = 1
            for i in range(4):
                new_x = current.point.x - x
                new_y = current.point.y - y
                new_point = Point(new_x, new_y)
                new_node = Node.__init__(self, new_point, current.g + 1, self.heuristic(new_point, goal), current)
                if(self.valid_cell(new_point)):
                    #TODO
                    if new_node not in openset:
                        openset.add(new_node)
                    else:
                        elem = openset.pop()
                        if(elem.g >= new_node.g):
                            openset.add(elem)
                        else:
                            openset.add(new_node)
                else:
                    if new_node not in closedset:
                        closedset.add(new_node)
                    continue
                if(i%2 == 0):
                    x*=-1
                else:
                    y*=-1


                

    def valid_cell(self, cell):
        return (0 <= self.map[cell.x][cell.y] <= 99)

    def run(self, rate: float=1):
        subrate = rospy.Rate(rate)

        while (self.map is None or self.robot_pos is None or self.goal is None) and not rospy.is_shutdown():
            subrate.sleep()

        while not rospy.is_shutdown():
            while(0 <= self.map[self.goal.x][self.goal.y] <= 99):
                print('goal not reachable, please change it')
            



    

__name__ == "__main__"
rospy.init_node('navigation_node')

navigation_node = NavigationNode()
navigation_node.run(rate=1)